import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get animate_button_forward => "Animate";
  String get animate_button_reset => "Reset Animation";
  String get animate_color => "Color";
  String get animate_colorSize_delay => "Color/Text Delay";
  String get animate_colorSize_sequence => "Color/Text Sequence";
  String get animate_colorSize_together => "Color/Text Together";
  String get animation => "Animation";
  String get asyncWork => "Async Work";
  String get back_to_showcase => "Back to Showcase";
  String get five => "five";
  String get form_checkbox_checked => "Checked";
  String get form_checkbox_not_checked => "Not Checked";
  String get form_radio_1_off => "Radio 1 Off";
  String get form_radio_1_on => "Radio 1 On";
  String get form_radio_2_off => "Radio 2 Off";
  String get form_radio_2_on => "Radio 2 On";
  String get form_switch_off => "Switch Off";
  String get form_switch_on => "Switch On";
  String get form_text_hint => "This is a text hint";
  String get form_text_required => "Please provide a value";
  String get forms => "Forms";
  String get four => "four";
  String get go_back => "Go Back";
  String get lists => "Lists";
  String get navigation => "Navigation";
  String get one => "one";
  String get pagers => "Pagers";
  String get permissions => "Permissions";
  String get settingsTab => "Settings";
  String get shared_element_button => "Shared Element Transition";
  String get shared_element_text => "This will transition";
  String get showcaseTab => "Showcase";
  String get three => "three";
  String get two => "two";
  String form_text_max_length(String maxLength) => "A value cannot be longer than $maxLength";
}

class $en extends S {
  const $en();
}

class $nl extends S {
  const $nl();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get two => "twee";
  @override
  String get three => "drie";
  @override
  String get shared_element_button => "Gedeeld Element Transitie";
  @override
  String get navigation => "Navigatie";
  @override
  String get form_text_hint => "Dit is een tekst hint";
  @override
  String get showcaseTab => "Voorvertoning";
  @override
  String get asyncWork => "Asynchroon Werk";
  @override
  String get animate_button_reset => "Reset Animatie";
  @override
  String get four => "vier";
  @override
  String get permissions => "Permissies";
  @override
  String get form_switch_on => "Switch Aan";
  @override
  String get animate_colorSize_delay => "Kleur/Tekst Vertraagd";
  @override
  String get animate_color => "Kleur";
  @override
  String get five => "vijf";
  @override
  String get form_radio_2_on => "Radio 2 Aan";
  @override
  String get shared_element_text => "Dit zal overgaan van A naar B";
  @override
  String get form_checkbox_checked => "Aangevinkt";
  @override
  String get one => "een";
  @override
  String get form_text_required => "Gelieve een waarde op te geven";
  @override
  String get go_back => "Keer Terug";
  @override
  String get animate_colorSize_sequence => "Kleur/Tekst Achtereen";
  @override
  String get animation => "Animatie";
  @override
  String get form_radio_1_off => "Radio 1 Uit";
  @override
  String get animate_button_forward => "Animeren";
  @override
  String get settingsTab => "Instellingen";
  @override
  String get lists => "Lijsten";
  @override
  String get pagers => "Pagers";
  @override
  String get animate_colorSize_together => "Kleur/Tekst Samen";
  @override
  String get form_radio_1_on => "Radio 1 Aan";
  @override
  String get form_radio_2_off => "Radio 2 Uit";
  @override
  String get back_to_showcase => "Terug naar Voorvertoning";
  @override
  String get form_switch_off => "Switch Uit";
  @override
  String get form_checkbox_not_checked => "Niet Aangevinkt";
  @override
  String get forms => "Formulieren";
  @override
  String form_text_max_length(String maxLength) => "Een tekstwaarde kan niet langer zijn dan $maxLength";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("nl", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "nl":
          S.current = const $nl();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
